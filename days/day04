Диски
Презентация
.png
На внешних цилиндрах больше секторов, чем на внутренних => чем ближе к центру тем меньше скорость нужна (CD)
На жестких дисках - постоянная угловая скорость (в центре больше плотность)
Partitioning - разделение диска на несколько логических частей (партиции, на каждой своя файловая система)
Существует другой подход - "собственная" файловая система на "сыром" диске (MySQL)

Диски2
Презентация
Современный контроллер жесткого диска может находить механически поврежденные блоки (bad blocks) и делать remap их на некоторые запасные (sector sparing: replace bad sectors with spare)
\shell{man 1 badblocks}
Bootblock - ?

RAID
Redundant Arrays of Independent Disks (Избыточный массив независимых дисков)
Reilability (надежность, hacks for more long time of complex usage)
Perfomance (striping, суммирование EOPS)
Levels:
    0 - pure striping (1 блок на 1 диске, 2 блок на 2 диске и т.д. - один диск вышел из строя - fail)
    1 - pure mirroring (пара дисков, данные продублированы)
    0 + 1, 1 + 0
    2, 3, 4, 5 - используются не так часто (хранение доп. данных)
.png
Rebuild - падает производительность
Hardware RAID - проблемы: "залоченность" на производителе (vendor lock in), драйвера, как правило, не очень
Software RAID - гипотетически медленно, но на практике нужная производительность достигается
У аппаратных RAID - есть батарейка, которая "улучшает" производительность (сначала на батарейку, потом на диск, когда будет удобно)

Организация файловых систем
Структура директорий: связный список и хэш-таблица
.png?
Выделение памяти
    Линейное
        .png
        Объект задается началом и концом (здесь возникают проблемы внешней и внутренней фрагментации)
        Perfomance: +sequential, +random
    Список
        .png
        Perfomance: -sequential, --random
        Надежность: -
        Решает проблему внешней фрагментации
        В каждом "блоке" указатель на следующий
    FAT
        .png
        Все ссылки хранятся в начале диска - их можно эффективно кэшировать
    Индексированная
        .png
        Отдельный блок для ссылок на данные
        Внутренняя фрагментация
    UNIX
        .png
        Комбинированная
        Косвенная многоуровневая адресация
smart (\shell{smartctl}) - оценка диска на практике
Свободные сектора
    Bit Vector - fast, space usage
    Список

Операции с файлами    
.png
.png
.png
Презентация

Системные вызовы
.png
Дескриптор (например, stdin, ...) - интерфейс связи с ресурсом
Файловый дескриптор
Презентация

Системные вызовы2
Презентация
'e' отсутствует у 'creat' чтобы было быстрее писать
POSIX - стандарт, минимальный интерфейс (Unix)
POSIX compatible operating system
Различные мнемоники для прав доступа (S_IXOTH, ...)
Headers for 'function' in \shell{man 2 'function'} or in POSIX
create.c
Можно открывать файл по умолчанию в двух режимах: O_APPEND или O_TRUNC
O_EXCL - позволяет сделать создание файла атомарным
close() - закрывает файловый дескриптор
Важно "не терять" файловые дескрипторы и вовремя их закрывать
fork-бомба --- каждый дочерний процесс делает fork() и так далее
unlink() - удаляет имя из файловой системы и, возможно, файл, к которому оно прикреплено
cwd процесса - текущая директория, в которой запущен процесс (resolve relative paths)
getcwd()
write() и read() --- нужно писать цикл со счетчиком, для того чтобы записать точное количество информации
iovec {
    void* buf;
    size_t size;
}
iovec[x]
getdents() --- лучше использовать C-шный readdir, т.к. в его сигнатуре интерфейс вида struct linux_dirent

Проход по пути
Презентация
Количество seek по диску зависит от длины пути
namei (name-innode) --- lru-cache (файл <--> номер inode)

Пару слов о типах 
Использовать только эти
Презентация

Common pitfalls
Неатомарные операции (окно race)
Презентация
Файловая система гарантирует, что до тех пор пока ты держишь файловый дескриптор на файл с ним ничего не произойдет извне (функции оканчивающиеся на at, защита от TOCTOU)
